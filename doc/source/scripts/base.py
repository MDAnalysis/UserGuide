
from __future__ import print_function
import sys
import os
import pathlib
import tabulate
import textwrap
from collections import defaultdict
import helpers

def _sanitize_name(name: str) -> str:
    return '_' + name.replace(' ', '_').replace('/', '_').lower()


class TableWriter(object):
    """
    For writing tables with easy column switching.

    Define _set_up_input() and column methods.

    Filename relative to source.
    """

    def __init__(self, *,
        filename: str,
        include_table: bool = False,
        headings: list = [],
        preprocess: list = [],
        postprocess: list = [],
        sort: bool = True,
        inputs: set = set(),
        methods: dict = {},
    ):
        self.filename = filename
        self.include_table = include_table
        self.headings = headings
        self.preprocess = preprocess
        self.postprocess = postprocess
        self.sort = sort
        self.inputs = inputs
        self.methods = methods

    def __getattr__(self, key):
        try:
            return self.fields[key]
        except KeyError:
            return super(TableWriter, self).__getattr__(key)

    def do_stuff(self, *args, **kwargs):
        stem = os.getcwd().split('source')[0]
        self.path = os.path.join(stem, 'source', self.filename)
        self.fields = defaultdict(list)

        parent_directory = pathlib.Path(self.path).parent
        parent_directory.mkdir(exist_ok=True, parents=True)
        self.get_lines(*args, **kwargs)
        self.write_table()

    def _run_method(self, method_name: str, *args, **kwargs) -> None:
        sanitized_method_name = _sanitize_name(method_name)
        meth = self.methods[method_name] or getattr(self, sanitized_method_name)
        val = meth(*args, **kwargs)
        self.fields[method_name].append(val)

    def get_lines(self, *args, **kwargs):
        lines = []
        for items in self.inputs or self._set_up_input():
            try:
                lines.append(self.get_line(*items))
            except TypeError:  # one argument
                lines.append(self.get_line(items))
        if self.sort:
            lines = sorted(lines)
        self.lines = lines

    def get_line(self, *args) -> list:
        line = []
        for p in self.preprocess:
            self._run_method(p, *args)
        for h in self.headings:
            line.append(self._run_method(h, *args))
        for p in self.postprocess:
            self._run_method(p, *args)
        return line

    def write_table(self):
        with open(self.path, 'w') as f:
            f.write(f'..\n    Generated by {sys.argv[0].split("/")[-1]}\n\n')
            if self.include_table:
                f.write(f'.. table:: {self.include_table}\n\n')
            tabled = tabulate.tabulate(self.lines,
                                       headers=self.headings,
                                       tablefmt='rst')
            if self.include_table:
                tabled = textwrap.indent(tabled, '    ')
            f.write(tabled)
        print('Wrote ', self.filename)

    # ==== HELPER FUNCTIONS ==== #

    @staticmethod
    def sphinx_class(self, klass: type, tilde: bool =True) -> str:
        return helpers.sphinx_class(klass=klass, tilde=tilde)

    @staticmethod
    def sphinx_meth(meth, tilde=True):
        return helpers.sphinx_meth(meth=meth, tilde=tilde)

    @staticmethod
    def sphinx_ref(txt, label=None, suffix=''):
        return helpers.sphinx_ref(txt=txt, label=label, suffix=suffix)

    @staticmethod
    def sphinx_link(txt):
        return helpers.sphinx_link(txt=txt)
