{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Constructing, modifying, and adding to a Universe\n",
    "\n",
    "MDAnalysis version: ≥ 0.20.1\n",
    "\n",
    "**Last updated:** December 2022 with MDAnalysis 2.4.0-dev0\n",
    "\n",
    "Sometimes you may want to construct a Universe from scratch, or add attributes that are not read from a file. For example, you may want to group a Universe into chains, or create custom segments for protein domains.\n",
    "\n",
    "\n",
    "In this tutorial we:\n",
    "\n",
    "* create a Universe consisting of water molecules\n",
    "* merge this with a protein Universe loaded from a file\n",
    "* create custom segments labeling protein domains\n",
    "\n",
    "Throughout this tutorial we will include cells for visualising Universes with the [NGLView](http://nglviewer.org/nglview/latest/api.html) library. However, these will be commented out, and we will show the expected images generated instead of the interactive widgets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:07.730101Z",
     "iopub.status.busy": "2021-05-19T05:45:07.729014Z",
     "iopub.status.idle": "2021-05-19T05:45:08.355155Z",
     "shell.execute_reply": "2021-05-19T05:45:08.355550Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using MDAnalysis version 2.6.0-dev0\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1177615fa88e496c827928276bc1fc63",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using NGLView version 3.0.3\n"
     ]
    }
   ],
   "source": [
    "import MDAnalysis as mda\n",
    "from MDAnalysis.tests.datafiles import PDB_small\n",
    "import numpy as np\n",
    "from IPython.core.display import Image\n",
    "\n",
    "import warnings\n",
    "# suppress some MDAnalysis warnings when writing PDB files\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "print(\"Using MDAnalysis version\", mda.__version__)\n",
    "\n",
    "# Optionally, use NGLView to interactively view your trajectory\n",
    "import nglview as nv\n",
    "print(\"Using NGLView version\", nv.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating and populating a Universe with water\n",
    "\n",
    "### Creating a blank Universe\n",
    "\n",
    "The `Universe.empty()` method creates a blank Universe. The `natoms` (int) argument must be included. Optional arguments are:\n",
    "\n",
    "* n_residues (int): number of residues\n",
    "* n_segments (int): number of segments\n",
    "* atom_resindex (list): list of resindices for each atom\n",
    "* residue_segindex (list): list of segindices for each residue\n",
    "* trajectory (bool): whether to attach a MemoryReader trajectory (default False)\n",
    "* velocities (bool): whether to include velocities in the trajectory (default False)\n",
    "* forces (bool): whether to include forces in the trajectory (default False)\n",
    "\n",
    "We will create a Universe with 1000 water molecules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.360044Z",
     "iopub.status.busy": "2021-05-19T05:45:08.359297Z",
     "iopub.status.idle": "2021-05-19T05:45:08.361987Z",
     "shell.execute_reply": "2021-05-19T05:45:08.362393Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "resindices: [0 0 0 1 1 1 2 2 2 3]\n",
      "segindices: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "n_residues = 1000\n",
    "n_atoms = n_residues * 3\n",
    "\n",
    "# create resindex list\n",
    "resindices = np.repeat(range(n_residues), 3)\n",
    "assert len(resindices) == n_atoms    \n",
    "print(\"resindices:\", resindices[:10])\n",
    "\n",
    "# all water molecules belong to 1 segment\n",
    "segindices = [0] * n_residues\n",
    "print(\"segindices:\", segindices[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.365718Z",
     "iopub.status.busy": "2021-05-19T05:45:08.365202Z",
     "iopub.status.idle": "2021-05-19T05:45:08.498098Z",
     "shell.execute_reply": "2021-05-19T05:45:08.498549Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Universe with 3000 atoms>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create the Universe\n",
    "sol = mda.Universe.empty(n_atoms, \n",
    "                         n_residues=n_residues, \n",
    "                         atom_resindex=resindices, \n",
    "                         residue_segindex=segindices,\n",
    "                         trajectory=True) # necessary for adding coordinates\n",
    "sol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding topology attributes\n",
    "\n",
    "There isn't much we can do with our current Universe because MDAnalysis has no information on the particle elements, positions, etc. We can add relevant information manually using TopologyAttrs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**names**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.503893Z",
     "iopub.status.busy": "2021-05-19T05:45:08.502488Z",
     "iopub.status.idle": "2021-05-19T05:45:08.506820Z",
     "shell.execute_reply": "2021-05-19T05:45:08.507436Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['O', 'H1', 'H2', ..., 'O', 'H1', 'H2'], dtype=object)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol.add_TopologyAttr('name', ['O', 'H1', 'H2']*n_residues)\n",
    "sol.atoms.names"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**elements (\"types\")**\n",
    "\n",
    "Elements are typically contained in the `type` topology attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.512248Z",
     "iopub.status.busy": "2021-05-19T05:45:08.510687Z",
     "iopub.status.idle": "2021-05-19T05:45:08.514519Z",
     "shell.execute_reply": "2021-05-19T05:45:08.514882Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['O', 'H', 'H', ..., 'O', 'H', 'H'], dtype=object)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol.add_TopologyAttr('type', ['O', 'H', 'H']*n_residues)\n",
    "sol.atoms.types"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**residue names (\"resnames\")**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.518726Z",
     "iopub.status.busy": "2021-05-19T05:45:08.518094Z",
     "iopub.status.idle": "2021-05-19T05:45:08.521391Z",
     "shell.execute_reply": "2021-05-19T05:45:08.521748Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['SOL', 'SOL', 'SOL', ..., 'SOL', 'SOL', 'SOL'], dtype=object)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol.add_TopologyAttr('resname', ['SOL']*n_residues)\n",
    "sol.atoms.resnames"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**residue counter (\"resids\")**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.526483Z",
     "iopub.status.busy": "2021-05-19T05:45:08.525636Z",
     "iopub.status.idle": "2021-05-19T05:45:08.529005Z",
     "shell.execute_reply": "2021-05-19T05:45:08.529542Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([   1,    1,    1, ..., 1000, 1000, 1000])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol.add_TopologyAttr('resid', list(range(1, n_residues+1)))\n",
    "sol.atoms.resids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**segment/chain names (\"segids\")**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.533075Z",
     "iopub.status.busy": "2021-05-19T05:45:08.532490Z",
     "iopub.status.idle": "2021-05-19T05:45:08.535529Z",
     "shell.execute_reply": "2021-05-19T05:45:08.535907Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['SOL', 'SOL', 'SOL', ..., 'SOL', 'SOL', 'SOL'], dtype=object)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol.add_TopologyAttr('segid', ['SOL'])\n",
    "sol.atoms.segids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding positions\n",
    "\n",
    "Positions can simply be assigned, without adding a topology attribute.\n",
    "\n",
    "The O-H bond length in water is around 0.96 Angstrom, and the bond angle is 104.45°. We can first obtain a set of coordinates for one molecule, and then translate it for every water molecule."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.539608Z",
     "iopub.status.busy": "2021-05-19T05:45:08.538966Z",
     "iopub.status.idle": "2021-05-19T05:45:08.540815Z",
     "shell.execute_reply": "2021-05-19T05:45:08.541609Z"
    }
   },
   "outputs": [],
   "source": [
    "# coordinates obtained by building a molecule in the program IQMol\n",
    "h2o = np.array([[ 0,        0,       0      ],  # oxygen\n",
    "                [ 0.95908, -0.02691, 0.03231],  # hydrogen\n",
    "                [-0.28004, -0.58767, 0.70556]]) # hydrogen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.553594Z",
     "iopub.status.busy": "2021-05-19T05:45:08.553066Z",
     "iopub.status.idle": "2021-05-19T05:45:08.554921Z",
     "shell.execute_reply": "2021-05-19T05:45:08.555314Z"
    },
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([0., 0., 0.]), array([ 0.95908, -0.02691,  0.03231]), array([-0.28004, -0.58767,  0.70556]), array([8., 0., 0.]), array([ 8.95908, -0.02691,  0.03231]), array([ 7.71996, -0.58767,  0.70556]), array([16.,  0.,  0.]), array([16.95908, -0.02691,  0.03231]), array([15.71996, -0.58767,  0.70556]), array([24.,  0.,  0.])]\n"
     ]
    }
   ],
   "source": [
    "grid_size = 10\n",
    "spacing = 8\n",
    "\n",
    "coordinates = []\n",
    "\n",
    "# translating h2o coordinates around a grid\n",
    "for i in range(n_residues):\n",
    "    x = spacing * (i % grid_size)\n",
    "    y = spacing * ((i // grid_size) % grid_size)\n",
    "    z = spacing * (i // (grid_size * grid_size))\n",
    "    \n",
    "    xyz = np.array([x, y, z])\n",
    "    \n",
    "    coordinates.extend(h2o + xyz.T)\n",
    "\n",
    "print(coordinates[:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.558943Z",
     "iopub.status.busy": "2021-05-19T05:45:08.558340Z",
     "iopub.status.idle": "2021-05-19T05:45:08.561878Z",
     "shell.execute_reply": "2021-05-19T05:45:08.562428Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "coord_array = np.array(coordinates)\n",
    "assert coord_array.shape == (n_atoms, 3)\n",
    "sol.atoms.positions = coord_array"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can view the atoms with NGLView, a library for visualising molecules. It guesses bonds based on distance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.571967Z",
     "iopub.status.busy": "2021-05-19T05:45:08.569074Z",
     "iopub.status.idle": "2021-05-19T05:45:08.679597Z",
     "shell.execute_reply": "2021-05-19T05:45:08.671941Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# sol_view = nv.show_mdanalysis(sol)\n",
    "# sol_view.add_representation('ball+stick', selection='all')\n",
    "# sol_view.center()\n",
    "# sol_view"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div style=\"width:800px; text-align:center;\">\n",
    "\n",
    "![sol_view](images/constructing-universe_sol-view.png)\n",
    "    \n",
    "</div>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding bonds\n",
    "\n",
    "Currently, the `sol` universe doesn't contain any bonds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.683496Z",
     "iopub.status.busy": "2021-05-19T05:45:08.682906Z",
     "iopub.status.idle": "2021-05-19T05:45:08.684831Z",
     "shell.execute_reply": "2021-05-19T05:45:08.685439Z"
    }
   },
   "outputs": [],
   "source": [
    "assert not hasattr(sol, 'bonds')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "They can be important for defining 'fragments', which are groups of atoms where every atom is connected by a bond to another atom in the group (i.e. what is commonly called a molecule). You can pass a list of tuples of atom indices to add bonds as a topology attribute."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.691419Z",
     "iopub.status.busy": "2021-05-19T05:45:08.690576Z",
     "iopub.status.idle": "2021-05-19T05:45:08.694399Z",
     "shell.execute_reply": "2021-05-19T05:45:08.693731Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0, 1),\n",
       " (0, 2),\n",
       " (3, 4),\n",
       " (3, 5),\n",
       " (6, 7),\n",
       " (6, 8),\n",
       " (9, 10),\n",
       " (9, 11),\n",
       " (12, 13),\n",
       " (12, 14)]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bonds = []\n",
    "for o in range(0, n_atoms, 3):\n",
    "    bonds.extend([(o, o+1), (o, o+2)])\n",
    "\n",
    "bonds[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.708198Z",
     "iopub.status.busy": "2021-05-19T05:45:08.707472Z",
     "iopub.status.idle": "2021-05-19T05:45:08.710313Z",
     "shell.execute_reply": "2021-05-19T05:45:08.710844Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<TopologyGroup containing 2000 bonds>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sol.add_TopologyAttr('bonds', bonds)\n",
    "sol.bonds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The bonds associated with each atom or the bonds within an AtomGroup can be accessed with the `bonds` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:08.715330Z",
     "iopub.status.busy": "2021-05-19T05:45:08.714769Z",
     "iopub.status.idle": "2021-05-19T05:45:08.716711Z",
     "shell.execute_reply": "2021-05-19T05:45:08.717089Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<TopologyGroup containing 2 bonds>\n",
      "<TopologyGroup containing 7 bonds>\n"
     ]
    }
   ],
   "source": [
    "print(sol.atoms[0].bonds)\n",
    "print(sol.atoms[-10:].bonds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Merging with a protein\n",
    "\n",
    "Now we can merge the water with a protein to create a combined system by using `MDAnalysis.Merge` to combine AtomGroup instances.\n",
    "\n",
    "The protein is adenylate kinase (AdK), a phosphotransferase enzyme. [[1]](#References)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "protein = mda.Universe(PDB_small)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# protein_view = nv.show_mdanalysis(protein)\n",
    "# protein_view"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div style=\"width:800px; text-align:center;\">\n",
    "\n",
    "![protein_view](images/constructing-universe_protein-view.png)\n",
    "    \n",
    "</div>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will translate the centers of both systems to the origin, so they can overlap in space."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:09.047918Z",
     "iopub.status.busy": "2021-05-19T05:45:09.047428Z",
     "iopub.status.idle": "2021-05-19T05:45:09.051151Z",
     "shell.execute_reply": "2021-05-19T05:45:09.051496Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original solvent center of geometry:  [36.22634681 35.79514029 36.24595657]\n",
      "New solvent center of geometry:  [ 2.78155009e-07 -1.27156576e-07  3.97364299e-08]\n"
     ]
    }
   ],
   "source": [
    "cog = sol.atoms.center_of_geometry()\n",
    "print('Original solvent center of geometry: ', cog)\n",
    "sol.atoms.positions -= cog\n",
    "cog2 = sol.atoms.center_of_geometry()\n",
    "print('New solvent center of geometry: ', cog2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:09.054914Z",
     "iopub.status.busy": "2021-05-19T05:45:09.054416Z",
     "iopub.status.idle": "2021-05-19T05:45:09.057611Z",
     "shell.execute_reply": "2021-05-19T05:45:09.058032Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original solvent center of geometry:  [-3.66508082  9.60502842 14.33355791]\n",
      "New solvent center of geometry:  [8.30580288e-08 3.49225059e-08 2.51332265e-08]\n"
     ]
    }
   ],
   "source": [
    "cog = protein.atoms.center_of_geometry()\n",
    "print('Original solvent center of geometry: ', cog)\n",
    "protein.atoms.positions -= cog\n",
    "cog2 = protein.atoms.center_of_geometry()\n",
    "print('New solvent center of geometry: ', cog2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined = mda.Merge(protein.atoms, sol.atoms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:09.061518Z",
     "iopub.status.busy": "2021-05-19T05:45:09.061023Z",
     "iopub.status.idle": "2021-05-19T05:45:09.795879Z",
     "shell.execute_reply": "2021-05-19T05:45:09.795464Z"
    }
   },
   "outputs": [],
   "source": [
    "# combined_view = nv.show_mdanalysis(combined)\n",
    "# combined_view.add_representation(\"ball+stick\", selection=\"not protein\")\n",
    "# combined_view"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div style=\"width:800px; text-align:center;\">\n",
    "\n",
    "![combined_view](images/constructing-universe_combined-view.png)\n",
    "    \n",
    "</div>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unfortunately, some water molecules overlap with the protein. We can create a new AtomGroup containing only the molecules where every atom is further away than 6 angstroms from the protein."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:09.800226Z",
     "iopub.status.busy": "2021-05-19T05:45:09.799264Z",
     "iopub.status.idle": "2021-05-19T05:45:09.810045Z",
     "shell.execute_reply": "2021-05-19T05:45:09.810616Z"
    }
   },
   "outputs": [],
   "source": [
    "no_overlap = combined.select_atoms(\"same resid as (not around 6 protein)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this AtomGroup, we can then construct a new Universe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "u = mda.Merge(no_overlap)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:09.815330Z",
     "iopub.status.busy": "2021-05-19T05:45:09.814551Z",
     "iopub.status.idle": "2021-05-19T05:45:10.667182Z",
     "shell.execute_reply": "2021-05-19T05:45:10.666771Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# no_overlap_view = nv.show_mdanalysis(u)\n",
    "# no_overlap_view.add_representation(\"ball+stick\", selection=\"not protein\")\n",
    "# no_overlap_view"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div style=\"width:800px; text-align:center;\">\n",
    "\n",
    "![no_overlap_view](images/constructing-universe_no-overlap-view.png)\n",
    "    \n",
    "</div>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding a new segment\n",
    "\n",
    "Often you may want to assign atoms to a segment or chain -- for example, adding segment IDs to a PDB file. This requires adding a new Segment with `Universe.add_Segment`.\n",
    "\n",
    "Adenylate kinase has three domains: CORE, NMP, and LID. \n",
    "As shown in the picture below,[[1]](#References) these have the residues:\n",
    "\n",
    "* CORE: residues 1-29, 60-121, 160-214 (gray)\n",
    "* NMP: residues 30-59 (blue)\n",
    "* LID: residues 122-159 (yellow)\n",
    "\n",
    "<img src=\"https://github.com/MDAnalysis/MDAnalysisTutorial/blob/master/doc/sphinx/figs/angle_defs.png?raw=true\"> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:10.671260Z",
     "iopub.status.busy": "2021-05-19T05:45:10.670674Z",
     "iopub.status.idle": "2021-05-19T05:45:10.672871Z",
     "shell.execute_reply": "2021-05-19T05:45:10.673215Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['4AKE', 'SOL'], dtype=object)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u.segments.segids"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On examining the Universe, we can see that the protein and solvent are already divided into two segments: protein ('4AKE') and solvent ('SOL'). We will add three more segments (CORE, NMP, and LID) and assign atoms to them.\n",
    "\n",
    "First, add a Segment to the Universe with a `segid`. It will be empty:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:10.677503Z",
     "iopub.status.busy": "2021-05-19T05:45:10.676642Z",
     "iopub.status.idle": "2021-05-19T05:45:10.681096Z",
     "shell.execute_reply": "2021-05-19T05:45:10.681447Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AtomGroup with 0 atoms>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "core_segment = u.add_Segment(segid='CORE')\n",
    "core_segment.atoms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Residues can't be broken across segments. To put atoms in a segment, assign the segments attribute of their residues:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:10.685185Z",
     "iopub.status.busy": "2021-05-19T05:45:10.684613Z",
     "iopub.status.idle": "2021-05-19T05:45:10.720332Z",
     "shell.execute_reply": "2021-05-19T05:45:10.721305Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AtomGroup with 2744 atoms>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "core_atoms = u.select_atoms('resid 1:29 or resid 60:121 or resid 160-214')\n",
    "core_atoms.residues.segments = core_segment\n",
    "core_segment.atoms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:10.727091Z",
     "iopub.status.busy": "2021-05-19T05:45:10.726405Z",
     "iopub.status.idle": "2021-05-19T05:45:10.745112Z",
     "shell.execute_reply": "2021-05-19T05:45:10.745637Z"
    }
   },
   "outputs": [],
   "source": [
    "nmp_segment = u.add_Segment(segid='NMP')\n",
    "lid_segment = u.add_Segment(segid='LID')\n",
    "\n",
    "nmp_atoms = u.select_atoms('resid 30:59')\n",
    "nmp_atoms.residues.segments = nmp_segment\n",
    "\n",
    "lid_atoms = u.select_atoms('resid 122:159')\n",
    "lid_atoms.residues.segments = lid_segment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As of MDAnalysis 2.1.0, PDBs use the `chainID` `TopologyAttr` for the `chainID` column. If it is missing, it uses a placeholder \"X\" value instead of the `segid`. We therefore must manually set that ourselves to visualise the protein in NGLView."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add the topologyattr to the universe\n",
    "u.add_TopologyAttr(\"chainID\")\n",
    "core_segment.atoms.chainIDs = \"C\"\n",
    "nmp_segment.atoms.chainIDs = \"N\"\n",
    "lid_segment.atoms.chainIDs = \"L\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check that we have the correct domains by visualising the protein."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:10.755465Z",
     "iopub.status.busy": "2021-05-19T05:45:10.751466Z",
     "iopub.status.idle": "2021-05-19T05:45:11.453667Z",
     "shell.execute_reply": "2021-05-19T05:45:11.450452Z"
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# domain_view = nv.show_mdanalysis(u)\n",
    "# domain_view.add_representation(\"protein\", color_scheme=\"chainID\")\n",
    "# domain_view"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div style=\"width:800px; text-align:center;\">\n",
    "\n",
    "![domain-view](images/constructing-universe_domain-view.png)\n",
    "    \n",
    "</div>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tiling into a larger Universe\n",
    "\n",
    "We can use MDAnalysis to tile out a smaller Universe into a bigger one, similarly to `editconf` in GROMACS. To start off, we need to figure out the box size. The default in MDAnalysis is a zero vector. The first three numbers represent the length of each axis, and the last three represent the alpha, beta, and gamma angles of a triclinic box."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:11.458175Z",
     "iopub.status.busy": "2021-05-19T05:45:11.457580Z",
     "iopub.status.idle": "2021-05-19T05:45:11.460224Z",
     "shell.execute_reply": "2021-05-19T05:45:11.460670Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "print(u.dimensions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We know that our system is cubic in shape, so we can assume angles of 90°. The difference between the lowest and highest x-axis positions is roughly 73 Angstroms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:11.465372Z",
     "iopub.status.busy": "2021-05-19T05:45:11.464438Z",
     "iopub.status.idle": "2021-05-19T05:45:11.468190Z",
     "shell.execute_reply": "2021-05-19T05:45:11.468662Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "73.23912"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(u.atoms.positions[:, 0]) - min(u.atoms.positions[:, 0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So we can set our dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:11.472462Z",
     "iopub.status.busy": "2021-05-19T05:45:11.471802Z",
     "iopub.status.idle": "2021-05-19T05:45:11.474362Z",
     "shell.execute_reply": "2021-05-19T05:45:11.474930Z"
    }
   },
   "outputs": [],
   "source": [
    "u.dimensions = [73, 73, 73, 90, 90, 90]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To tile out a Universe, we need to copy it and translate the atoms by the box dimensions. We can then merge the cells into one large Universe and assign new dimensions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:11.482065Z",
     "iopub.status.busy": "2021-05-19T05:45:11.481439Z",
     "iopub.status.idle": "2021-05-19T05:45:11.483385Z",
     "shell.execute_reply": "2021-05-19T05:45:11.483734Z"
    }
   },
   "outputs": [],
   "source": [
    "def tile_universe(universe, n_x, n_y, n_z):\n",
    "    box = universe.dimensions[:3]\n",
    "    copied = []\n",
    "    for x in range(n_x):\n",
    "        for y in range(n_y):\n",
    "            for z in range(n_z):\n",
    "                u_ = universe.copy()\n",
    "                move_by = box*(x, y, z)\n",
    "                u_.atoms.translate(move_by)\n",
    "                copied.append(u_.atoms)\n",
    "    \n",
    "    new_universe = mda.Merge(*copied)\n",
    "    new_box = box*(n_x, n_y, n_z)\n",
    "    new_universe.dimensions = list(new_box) + [90]*3\n",
    "    return new_universe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is a 2 x 2 x 2 version of our original unit cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "tiled = tile_universe(u, 2, 2, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-05-19T05:45:11.488457Z",
     "iopub.status.busy": "2021-05-19T05:45:11.487937Z",
     "iopub.status.idle": "2021-05-19T05:45:18.852705Z",
     "shell.execute_reply": "2021-05-19T05:45:18.845132Z"
    }
   },
   "outputs": [],
   "source": [
    "# tiled_view = nv.show_mdanalysis(tiled)\n",
    "# tiled_view"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div style=\"width:800px; text-align:center;\">\n",
    "\n",
    "![tiled_view](images/constructing-universe_tiled-view.png)\n",
    "    \n",
    "</div>\n",
    "</center>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "\n",
    "[1]: Beckstein O, Denning EJ, Perilla JR, Woolf TB. Zipping and unzipping of adenylate kinase: atomistic insights into the ensemble of open<-->closed transitions. J Mol Biol. 2009;394(1):160–176. [doi:10.1016/j.jmb.2009.09.009](https://dx.doi.org/10.1016%2Fj.jmb.2009.09.009)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Acknowledgments\n",
    "\n",
    "The Universe tiling code was modified from [\\@richardjgowers](https://github.com/richardjgowers)'s [gist on the issue](https://gist.github.com/richardjgowers/b16b871259451e85af0bd2907d30de91) in 2016."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  },
  "vscode": {
   "interpreter": {
    "hash": "7b52aa17ef4e9358c0e91ff3f0bf50d10667bb8b55636d4b9fb967a2ff94bd8c"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
